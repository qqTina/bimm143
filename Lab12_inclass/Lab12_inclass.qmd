---
title: "Lab12_inclass"
author: "Qianqian Tao"
format: pdf
---

Here we will use the DESeq2 package for RNASeq analysis. The data for today's class come from a study of airway smooth muscle cells treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014)

##Import their data

We need two things for this analysis:

-countData (counts for every transcript/gene in each experiment)
-colData (metadata that describes the experimental setup)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names=1)
metaData <- read.csv("airway_metadata.csv", row.names=1)
head(countData)
nrow(countData)
```
> Q1. How many genes are in this dataset? 

38694

>Q2. How many ‘control’ cell lines do we have? 

```{r}
head(metaData)
table(metaData$dex)
```
There are 4 control cell lines. 

Another way
```{r}
sum(metaData$dex == "control")
```

(Is this gene significantly different between control and treated?)--T test, compare mean of control and treated

```{r}
library(tidyverse)
countData %>% 
  summarize()
apply(countData, 2, mean)
```

-Step 1. 
Calculate the mean of the control samples (i.e. columns in countData)
Calculate the mean of the treated samples (i.e. columns in countData)

(a) We need to find all "control" samples
- Look in the metaData $dex column

>Q3. How would you make the above code in either approach more robust?

```{r}
control.inds <- metaData$dex=="control"
```

(b) Extract all the control columns from countData and call it `control.counts`
```{r}
head(countData[,control.inds])
control.counts <- countData[,control.inds]

```
(c) Calculate the mean value accross the rows of `control.counts` i.e. calculate the mean count values for each gene in the control samples.

```{r}

control.means <- rowMeans(control.counts)
head(control.means)

```


>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.means)

-Step. 2
Do the same thing for treated sample
```{r}
treated.ids <- metaData$dex=="treated"
treated.count <- countData[,treated.ids]
treated.means <- rowMeans(treated.count)
head(treated.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treated.means)


```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. 

```{r}
plot(meancounts, log="xy")
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)
ggplot(meancounts, aes(control.means, treated.means))+
  geom_point()

```
>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
ggplot(meancounts, aes(control.means, treated.means))+
  geom_point()+
 scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")

```



We use log transforms for skewed data such as this and because we really care most about relative changes in magnitude.

We most often use log2 as our transform as the math is easier to interpret than log 10 or others.

If we have no change -i.e. some values in control and treated who have zero log 2 value
```{r}
log2(10/10)
log2(20/10)
log2(10/20)
log2(40/10)
```
If I have double the amount i.e. 20 compared to 10 for example I will have a log2 fold-change of +1 

```{r}
meancounts$log2fc <- log2(meancounts$treated.means/meancounts$control.means)
head(meancounts)
```
>Q. How many genes are up regulated at the common threshold of +2 log2FC values?
Do you trust the result?

```{r}
sum(meancounts$log2fc>=2, na.rm=TRUE)

```
> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

arr.ind =TRUE in which() allows the function to return the indices of the zero values. We need to take the first column because that is the column with the row numbers that we need to remove in the countData. unique() function remove the row names and return only a vector of row numbers that we need to remove.

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```


>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```


>Q10. Do you trust these results? Why or why not?

No, because we have the chance to get many false-positive results. 

How to prove if the data are significantly different in a different way?

To do this we need to use DESeq2 package
##DESeq2 analysis

```{r}
 
head(library(DESeq2))

```

To use DESeq we need our input countData and colData in a specific format that DESeq2 wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData, colData = metaData, design = ~dex)
```

To run the analysiss I can now use the main DESeq2 function called `DESeq()` with `dds` as input

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package. 

`padj` = BH adjusted p-value, corrected for multiple testing using BH method; p-value = 0.05, 95% confidence, 5% of conincidence

```{r}
res <- results(dds)
head(res)
```
Let's make a final (for today) plot of log2 fold-change vs. the adjusted P-value
0 x-axis mean no change; other values either up regulated or down regulated 

```{r}
plot( res$log2FoldChange,  res$padj)
```
It is the low P-values that we care about and there are lost in the skewed plot above. Let's take the -log of the res$pdj values for our plot. Points on the top are significantly different, having low p-values. On the right, upregulated; On the left, down regulated  
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=c(-2,2), col="darkgray", lty=9) # in the middle not up or down regulated enough
abline(h=-log(0.05), col="darkgray", lty=9) # below this not statistically significant
```

Finally, we can make a color vector to use in the plot to better highlight the genes we care about

```{r}

mycols <- rep("gray", nrow(res))

mycols[res$log2FoldChange >= 2] <- "red"
mycols[res$log2FoldChange <= -2] <- "red"
mycols[res$padj <=0.05] <- "blue"
mycols[res$log2FoldChange <2 & res$log2FoldChange >-2 ] <- "grey"

plot( res$log2FoldChange,  -log(res$padj), 
      col=mycols,
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=c(-2,2), col="darkgray", lty=9) 
abline(h=-log(0.05), col="darkgray", lty=9)


```

Still To Do:
- Add annotation
- Save results as CSV file
- Do some Pathway Analysis

We can use AnnotationDbi package to add annotations data such as gene identifiers from different sources to our results object
```{r}
res
library("AnnotationDbi")
library("org.Hs.eg.db")
```
We can translate (a.k.a. map) the genes to the following formats

```{r}
columns(org.Hs.eg.db)
```

My id are stored as rownames of `res`
```{r}
head(rownames(res))
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```
>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
```
```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="UNIPROT",          # The new format we want to add
                     multiVals="first")
```

# Let's write a csv file for our results
```{r}
write.csv(res, file="deseq_results.csv")
```


## Pathway Analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes 

#pathview package for drawing illustration
```{r}
library(pathview)
library(gage)
library(gageData)

```
Look at the first two KEGG pathways
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
Make a new vector of fold-change values that I will use as input for `gage` this weill have the ENTREZ IDs as names

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
x <- 1:3
names(x) <- c("cgabdra", "lisa","tina")
x
```
#order by overlap, largest overlap to smallest; take res objects, pathways as two inputs 
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

Look at the top 3 "less"; keg identifier e.g.hsa05310 
```{r}
head(keggres$less,3)
```
Now I can use the KEGG IDs of these pathways from gage to view our genes mapped to these pathways. 
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
> Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05332")
```
![Asthma pathway from KEGG with our down regulated gene hsa05332shown in color](hsa05332.pathview.png)

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04940")
```
![Asthma pathway from KEGG with our down regulated gene hsa04940 shown in color](hsa04940.pathview.png)


![Asthma pathway from KEGG with our down regulated gene hsa05310 shown in color](hsa05310.pathview.png)