---
title: "Lab7_inclass"
author: "Qianqian Tao"
format: pdf
---
#Clustering 
First let's make up some data to cluster so we can get a feel for these methods and how to work with them.

We can use the `rnorm()` function to get random numbers from a normal distribution around a given `mean`. 

```{r}
#random number 
hist(rnorm(5000, mean=3))
```
Let's get 30 points with a mean of 3. 
```{r}
hist(rnorm(30, mean=3))

hist(rnorm(30, mean=-3))

a <- c(rnorm(30, mean=3),rnorm(30, mean=-3))
x <- cbind(x=a,y=rev(a))
x


```
##K-means clustering

Very popular clustering method
```{r}
km <- kmeans(x, 2)
km
```


```{r}
#What component is cluster size?
km$size
#What component is cluster membership/assignment
km$cluster
#what component details cluster centers?
km$centers
#how spread the points are
km$tot.withinss

```
>Q. Plot x and add centers in different colors

```{r}
mycols <- c(1,2,3)
plot(x, col=mycols)
plot(x, col=km$cluster)
points(km$centers,col="blue",pch=15,cex=2)
```

>Q. Let's cluster into 3 groups on the same `x` data and make a plot.

```{r}
km_2 <- kmeans(x,4)
plot(x,col=km_2$cluster)
km_2$tot.withinss
points(km_2$centers, col="pink", pch=15, cex=2)
```

# Hierachical Clustering
We can use the `hclust()` function for Hierachical Clustering.
Unlike `kmeans()`, where we could just pass in our data as input, we
need to give `hclust()` a "distance matrix".

We will use the `dist()` function to start with. 
```{r}
d <- dist(x)
hc <- hclust(d)
hc
plot(hc)

```

I can now "cut" my tree with the `cutree()` to yield a cluster membership vector

```{r}

grps <- cutree(hc, h=8)
grps

```

You can also tell `cutree()` to cut where it yield "k" groups.

```{r}
grps2 <- cutree(hc, k=2)
grps
plot(x, col=grps)

```

# Principal Component Analysis

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url,row.names = 1)
dim(x)
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
pairs(x, col=rainbow(10), pch=16)
#if the value are exactly the same, the line will be straight in the pair-wise graph between two places
#if above the diagnol, more in the y axis; if below, more in x-axis 
```

```{r}
pca <- prcomp( t(x) )
pca$x
#proportion of variance: include how much portion of variance
summary(pca)
```

```{r}
attributes(pca)
color<- c("orange","red","blue","darkgreen")
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500),col=color,pch=1)
text(pca$x[,1], pca$x[,2], colnames(x),col=color)

```

